{"version":3,"sources":["react-auth0-spa.js","components/NavBar.js","components/PrivateRoute.js","components/Profile.js","utils/history.js","components/Singlecard.js","components/Classform.js","components/Search.js","components/ClassCard.js","components/Home.js","components/Classes.js","pages/DashBoard.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","Auth0Provider","children","onRedirectCallback","initOptions","useState","isAuthenticated","setIsAuthenticated","user","setUser","auth0Client","setAuth0","loading","setLoading","popupOpen","setPopupOpen","useEffect","a","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","params","console","error","Provider","value","getIdTokenClaims","loginWithRedirect","getTokenSilently","getTokenWithPopup","logout","NavBar","className","id","to","href","target","rel","onClick","returnTo","origin","PrivateRoute","Component","component","path","rest","targetUrl","fn","render","props","Profile","log","src","picture","alt","style","height","name","email","JSON","stringify","createBrowserHistory","PreReqList","list","map","item","type","key","toString","navigateTo","replace","obj","button","getElementById","scrollIntoView","behavior","block","inline","preReqsMet","info","pre","completed","color","rank","Singlecard","data","area","code","onDelete","preReq","initstate","classcode","preReqs","nameError","classcodeError","prereqError","valid","dropdowndb","Dropdown","items","filter","length","Classform","state","handleChange","bind","codeChange","handleSubmit","validate","onFocus","onBlur","changeState","event","this","setState","preventDefault","newclass","fast","querySelector","removeClass","Date","now","keyup","e","which","ready","addClass","unbind","reqHeader","Headers","append","fetch","method","headers","then","response","json","catch","err","onSubmit","autoComplete","position","htmlFor","onChange","marginLeft","form","Search","searchtext","onKeyDown","changeSearch","keyCode","placeholder","completedArray","load","classes","axios","post","body","result","forEach","parse","push","sort","b","Truecard","delete","Home","Classes","userInfo","overflow","overflowX","DashBoard","App","exact","Boolean","hostname","match","ReactDOM","domain","config","client_id","clientId","redirect_uri","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.2418be8a.chunk.js","sourcesContent":["// src/react-auth0-spa.js\r\nimport React, { useState, useEffect, useContext } from \"react\";\r\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\r\n\r\nconst DEFAULT_REDIRECT_CALLBACK = () =>\r\n  window.history.replaceState({}, document.title, window.location.pathname);\r\n\r\nexport const Auth0Context = React.createContext();\r\nexport const useAuth0 = () => useContext(Auth0Context);\r\nexport const Auth0Provider = ({\r\n  children,\r\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\r\n  ...initOptions\r\n}) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState();\r\n  const [user, setUser] = useState();\r\n  const [auth0Client, setAuth0] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [popupOpen, setPopupOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const initAuth0 = async () => {\r\n      const auth0FromHook = await createAuth0Client(initOptions);\r\n      setAuth0(auth0FromHook);\r\n\r\n      if (window.location.search.includes(\"code=\")) {\r\n        const { appState } = await auth0FromHook.handleRedirectCallback();\r\n        onRedirectCallback(appState);\r\n      }\r\n\r\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\r\n\r\n      setIsAuthenticated(isAuthenticated);\r\n\r\n      if (isAuthenticated) {\r\n        const user = await auth0FromHook.getUser();\r\n        setUser(user);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    initAuth0();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const loginWithPopup = async (params = {}) => {\r\n    setPopupOpen(true);\r\n    try {\r\n      await auth0Client.loginWithPopup(params);\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      setPopupOpen(false);\r\n    }\r\n    const user = await auth0Client.getUser();\r\n    setUser(user);\r\n    setIsAuthenticated(true);\r\n  };\r\n\r\n  const handleRedirectCallback = async () => {\r\n    setLoading(true);\r\n    await auth0Client.handleRedirectCallback();\r\n    const user = await auth0Client.getUser();\r\n    setLoading(false);\r\n    setIsAuthenticated(true);\r\n    setUser(user);\r\n  };\r\n  return (\r\n    <Auth0Context.Provider\r\n      value={{\r\n        isAuthenticated,\r\n        user,\r\n        loading,\r\n        popupOpen,\r\n        loginWithPopup,\r\n        handleRedirectCallback,\r\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\r\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\r\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\r\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\r\n        logout: (...p) => auth0Client.logout(...p)\r\n      }}\r\n    >\r\n      {children}\r\n    </Auth0Context.Provider>\r\n  );\r\n};","// src/components/NavBar.js\r\n\r\nimport React, { Fragment } from \"react\";\r\nimport { useAuth0 } from \"../react-auth0-spa\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NavBar = () => {\r\n    const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\r\n\r\n    return (\r\n        <nav className='navbar navbar-expand-lg navbar-light bg-light '>\r\n\r\n            <div className='container-fluid row d-flex justify-content-end' id=\"navbarNavAltMarkup\">\r\n\r\n                <h1 className=\"navbar-brand\"><Link to=\"/\">Classdotio</Link> by <a href=\"https://www.mikalyoung.com/\" target=\"_blank\" rel=\"noopener noreferrer\"> Mikal Young</a></h1>\r\n\r\n\r\n                <ul className=\"nav navbar-nav d-flex align-items-center flex-row-reverse col-3 ml-auto justify-content-start \">\r\n\r\n\r\n\r\n\r\n\r\n                    {!isAuthenticated && (\r\n                        <li className=\"nav-item\"><button className='btn btn-primary' onClick={() => loginWithRedirect({})}>Log in</button></li>\r\n                    )}\r\n\r\n                    {isAuthenticated && <li className=\"nav-item ml-auto\"><button className='btn btn-outline-primary justify-self-end' onClick={() => logout({ returnTo: window.location.origin })}>Log out</button></li>}\r\n\r\n                    {isAuthenticated && (\r\n                        <Fragment>\r\n                            <li className=\"nav-item p-2\"><Link to=\"/profile\" >Profile</Link></li>\r\n                            <li className=\"nav-item p-2\"><Link to=\"/dashboard\" >Home</Link></li>\r\n                        </Fragment>\r\n                    )}\r\n\r\n                </ul>\r\n\r\n            </div>\r\n        </nav>\r\n\r\n\r\n    );\r\n};\r\n\r\nexport default NavBar;","// src/components/PrivateRoute.js\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { useAuth0 } from \"../react-auth0-spa\";\r\n\r\nconst PrivateRoute = ({ component: Component, path, ...rest }) => {\r\n  const { loading, isAuthenticated, loginWithRedirect } = useAuth0();\r\n\r\n  useEffect(() => {\r\n    if (loading || isAuthenticated) {\r\n      return;\r\n    }\r\n\r\n    const fn = async () => {\r\n      await loginWithRedirect({\r\n        appState: { targetUrl: path }\r\n      });\r\n    };\r\n    \r\n    fn();\r\n\r\n  }, [loading, isAuthenticated, loginWithRedirect, path]);\r\n\r\n  const render = props =>\r\n    isAuthenticated === true ? <Component {...props} /> : null;\r\n\r\n  return <Route path={path} render={render} {...rest} />;\r\n};\r\n\r\nexport default PrivateRoute;","// src/components/Profile.js\r\n\r\nimport React, { Fragment } from \"react\";\r\nimport { useAuth0 } from \"../react-auth0-spa\";\r\n\r\nconst Profile = () => {\r\n  const { loading, user } = useAuth0();\r\n  console.log('yikes');\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  } else if (!user) {\r\n    return <div> not the user </div>\r\n  }\r\n\r\n  return (\r\n\r\n    <Fragment>\r\n      {console.log(user)}\r\n      <img src={user.picture} alt=\"Profile\" style={{ height: \"100px\" }} />\r\n\r\n      <h2>{user.name}</h2>\r\n      <p>{user.email}</p>\r\n      <code>{JSON.stringify(user, null, 2)}</code>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Profile;","import { createBrowserHistory } from \"history\";\r\nexport default createBrowserHistory();","import React from \"react\";\n\nfunction Singlecard (props) {\n\n    /*constructor(props) {\n        super(props);\n        console.log(this.props.data);\n        this.state = this.props.data;\n        this.onDelete = this.onDelete.bind(this);\n    } */\n\n    function onDelete() {\n        console.log('item');\n        props.delete(this.props.data);\n    }\n\n    console.log(props.data?.name);\n    let { data } = props;\n\n    return (\n        <div id={data.area + '-' + data.code} className={preReqsMet(data) + ' classCard col-10 container offset-1'}>\n            <div className=\"row\">\n                <h3 className=\"col-xl-4 col-sm-4\">{data.area + ' ' + data.code}</h3>\n                <h3 className=\"col-xl-7 col-sm-6\">{data.name}</h3>\n                <img className=\"col-xl-1 col-sm-2 deletebtn d-flex justify-content-end\" src=\"./assets/delete.svg\" onClick={() => { this.onDelete() }} />\n            </div>\n            <div className=\"row\">\n                <h4 className=\"col-8\">pre-reqs: <PreReqList list={data.preReq} /> </h4>\n                <h4 className=\"col-4\">completed: {data.completed ? 'yes' : 'no'}</h4>\n            </div>\n            <div className=\"row\">\n                <p className=\"col-12\">description: the course you need to learn all about {data.name}</p>\n            </div>\n        </div>\n    );\n}\n\nfunction PreReqList(props) {\n    return props.list.map((item) =>\n        <button\n            type=\"button\"\n            key={item.toString()}\n            onClick={navigateTo}\n            className=\"btn btn-secondary\"\n            value={item.replace(' ', '-')} \n        >\n            {item} \n        </button>\n    );\n}\n\nfunction navigateTo(obj) {\n    let button = obj.target;\n\n    let elmnt = document.getElementById(button.value);\n    //console.log(\"#\"+button.value);\n    elmnt.scrollIntoView({ behavior: \"smooth\", block: \"start\", inline: \"nearest\" });\n}\n\nfunction preReqsMet(info) {\n    let pre = info.pre;\n    //console.log(completedArray);\n    //console.log(pre);\n    if (info.completed) {\n        info.color = 'blue';\n        info.rank = '1';\n        //console.log('blue');\n        return 'blue';\n    }\n    else {\n        // put back later\n        /*for (var i = 0; i < pre.length; i++) {\n            if (!completedArray.includes(pre[i])) {\n                info.color = 'red';\n                info.rank = '3';\n                //console.log('red');\n                return 'red';\n            }\n        }*/\n        //info.rank='2';\n        info.color = 'yellow';\n        info.rank = '2'\n        //console.log('yellow');\n        return 'yellow';\n    }\n}\n\nexport default Singlecard","import React from \"react\";\n\nconst initstate = {\n    name: '',\n    classcode: '',\n    preReqs: '',\n    nameError: '',\n    classcodeError: '',\n    prereqError: '',\n    value: '',\n    //valid: false\n    valid: true,\n    dropdowndb: []\n}\n\nclass Classform extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = initstate;\n        this.handleChange = this.handleChange.bind(this);\n        this.codeChange = this.codeChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.changeState = this.changeState.bind(this);\n\n    }\n\n    handleChange(event) {\n        this.setState({\n            name: event.target.value\n        });\n\n\n    }\n\n    changeState(obj) {\n\n    }\n\n    codeChange(event) {\n        this.setState({\n            classcode: event.target.value\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        if (this.validate()) {\n            this.props.newclass();\n        }\n        this.setState({ name: '' });\n        this.setState({ classcode: '' });\n        this.setState({ preReqs: '' });\n\n    }\n\n    validate() {\n        this.setState({ nameError: '' });\n        this.setState({ classcodeError: '' });\n        let fast = 1;\n\n        //console.log('no way 2');\n        if (!this.state.name) {\n            this.setState({ nameError: \"name cannot be empty\" });\n            ////console.log('no way!');\n            this.setState({ valid: false });\n            fast = 0;\n\n            // return false;\n        }\n        if (!this.state.classcode) {\n            this.setState({ classcodeError: \"class code cannot be empty\" });\n            this.setState({ valid: false });\n            fast = 0;\n\n            //return false;\n        }\n\n        ////console.log('the final state is ' + this.state.valid);\n\n        if (fast === 1) {\n            //this.setState({ valid: true });   \n            return true;\n        }\n        else {\n            //this.setState({valid: true});\n            return false;\n        }\n\n    }\n\n    onFocus() {\n        //\n        //document.querySelector(document).ready(()=>{\n        document.querySelector('.dropdown-container').removeClass(\"hide\");\n        console.log(Date.now());\n        document.querySelector(\"#name\").keyup(function keymove(e) {\n\n            if (e.which === 40) {\n                console.log('yeet!');\n            }\n            //e.target.removeEventListener(e.type, keymove);\n        });\n\n\n        // });\n    }\n\n    onBlur() {\n        document.querySelector(document).ready(() => {\n            document.querySelector('.dropdown-container').addClass(\"hide\");\n            document.querySelector('#name').unbind(\"keyup\");\n        });\n\n    }\n\n    componentDidMount() {\n\n        let reqHeader = new Headers();\n        reqHeader.append('Accept', 'application/json');\n        let initObject = {\n            method: 'GET', headers: reqHeader,\n        };\n\n        fetch('/universaldb', initObject)\n            .then((response) => {\n                return response.json();\n                //dropdowndb=response.json();\n            })\n            .then((data) => {\n                //console.log(data);\n                this.setState({ dropdowndb: data });\n            })\n            .catch((err) => {\n                console.log(\"fetch request is broken\");\n                console.log(err);\n            });\n    }\n\n    render() {\n\n\n\n        return (\n            <form id=\"classform\" className=\"\" onSubmit={this.handleSubmit} autoComplete=\"new-password\" >\n                <div className=\"form-group\" style={{ position: \"relative\" }}>\n                    <label htmlFor=\"name\">name</label>\n                    <br></br>\n\n                    <input type=\"text\" id=\"name\" name={Date.now()} autoComplete=\"new-password\"\n                        className={this.state.nameError ? 'form-control incorrect' : 'form-control'} value={this.state.name}\n                        onChange={this.handleChange} list=\"options\" /*onFocus={this.onFocus} onBlur={this.onBlur}*/></input>\n\n                    <div className=\"errorMsg\">{this.state.valid ? '' : this.state.nameError}</div>\n                    {this.state.name !== '' ? <Dropdown list={this.state.dropdowndb} type={\"name\"} /> : ''}\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"classcode\">code</label>\n                    <br></br>\n\n                    <input type=\"text\" id=\"classcode\" className={this.state.classcodeError ? 'incorrect' : 'form-control'}\n                        value={this.state.classcode} onChange={this.codeChange}></input>\n\n                    <div className=\"errorMsg\">{this.state.valid ? '' : this.state.classcodeError}</div>\n                </div>\n\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"classcode\">completed:</label>\n                    <input type=\"checkbox\" name=\"complete\" id=\"completed\" className=\"\" style={{ marginLeft: '20px' }}></input>\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"preReqs\">prereq(s):</label>\n                    <br></br>\n                    <input type=\"text\" id=\"preReqs\" className=\"form-control\"></input>\n                </div>\n\n                <br></br>\n                <button type=\"submit\" className=\"btn btn-primary\" form=\"classform\">submit</button>\n\n\n            </form>\n\n\n        );\n    }\n}\n\nfunction Dropdown(props) {\n    let type = props.type;\n\n    let filtereditems = props.list.filter((item) => {\n\n        //if(item.name.toLowerCase().includes(props.name.toLowerCase())){\n        if (type == 'name')\n            return item.name;\n        else if (type == 'code')\n            return item.area + ' ' + item.code;\n\n        //}\n\n    });\n\n    // console.log(filtereditems);\n\n    const items = filtereditems.map((item) => {\n\n\n        return <option value={item.name} />\n\n\n    });\n    console.log(items);\n    if (items.length !== 0) {\n        return (\n            <datalist id=\"options\">\n                {items}\n            </datalist>\n        );\n    }\n    else {\n        return '';\n    }\n\n}\n\nexport default Classform","import React from \"react\";\n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            value: '',\n            searchtext: ''\n        }\n        this.search = this.search.bind(this);\n        //this.process=this.process.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n    }\n\n    search(event) {\n        this.props.changeSearch(event.target.value);\n    }\n\n    onKeyDown(e) {\n        if (e.keyCode === 8 || e.key === 'Backspace') {\n            console.log('deleted');\n        }\n    }\n\n    render() {\n        const bar = (\n            <input\n                className=\"col-7 form-control\"\n                placeholder=\"Search\"\n                name=\"search\"\n                id=\"search\"\n                onChange={this.search}\n                value={this.props.searchtext}\n                onKeyDown={this.onKeyDown}\n            ></input>\n        );\n        return bar;\n    }\n}\n\nfunction changeSearch(value) {\n    this.setState({ searchtext: value });\n    var items;\n\n    if (value !== '') {\n\n        this.setState({\n            list: this.state.oglist.filter((item) => {\n\n                if (Object.values(item).toString().toLowerCase().includes(value.toLowerCase())) {\n                    console.log(Object.values(item));\n                    return item;\n                }\n\n            })\n        });\n    }\n    else {\n        this.setState({ list: this.state.oglist });\n    }\n}\n\nexport default Search","// import { useAuth0 } from \"../react-auth0-spa\";\r\nimport axios from \"axios\";\r\nimport $ from 'jquery';\r\nimport React, { Fragment } from \"react\";\r\nimport '../style.css';\r\nimport Singlecard from \"./Singlecard\"\r\nimport Classform from \"./Classform\";\r\nimport Search from \"./Search\";\r\n\r\n\r\n\r\n\r\n/*$(document).ready(function () {\r\n    load();\r\n    //// update(); \r\n\r\n});*/\r\n\r\n//var classes = Array();\r\n\r\nvar completedArray = [];\r\n\r\n\r\n\r\nfunction createClass(name, area, code, completed, preReqs) {\r\n    var classvar = {\r\n        name,\r\n        code,\r\n        area,\r\n        completed,\r\n        preReqs,\r\n        color: (!completed) ? 'red' : 'blue',\r\n        rank: code,\r\n    };\r\n\r\n    if (completed) {\r\n        completedArray.push(area + ' ' + code);\r\n    }\r\n\r\n    return classvar;\r\n}\r\n\r\nfunction load() {\r\n\r\n    //var xhr = new XMLHttpRequest();\r\n    //xhr.open('GET', '/payload', true);\r\n    let classes = [];\r\n\r\n    console.log('loading');\r\n    /*xhr.onreadystatechange = function () {\r\n        if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {\r\n            //console.log('response is ' + xhr.responseText);\r\n            classes = JSON.parse(xhr.responseText);\r\n            console.log(classes);\r\n\r\n            classes.forEach((item) => {\r\n                if (typeof item.pre != 'string')\r\n                    item.pre = item.pre;\r\n                else\r\n                    item.pre = JSON.parse(item.pre);\r\n\r\n                if (item.completed) {\r\n                    completedArray.push(item.area + ' ' + item.code);\r\n                }\r\n            });\r\n\r\n            classes = classes.sort((a, b) => {\r\n                return a.completed - b.completed;\r\n            });\r\n\r\n        }\r\n    }\r\n    xhr.setRequestHeader('Accept', 'application/json');\r\n    xhr.send();*/\r\n\r\n    /*fetch('/payload', {\r\n        method: 'post',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(this.state.user)\r\n    })*/\r\n    axios.post('/payload', {\r\n        body: JSON.stringify(this.state.user)\r\n    })\r\n        .then(response => response.json())\r\n        .then((response) => {\r\n            classes = response.result;\r\n            console.log(classes);\r\n\r\n            classes.forEach((item) => {\r\n                if (typeof(item.preReqs) == 'string')\r\n                    item.preReqs = JSON.parse(item.preReqs);\r\n\r\n                if (item.completed) {\r\n                    completedArray.push(item.area + ' ' + item.code);\r\n                }\r\n            });\r\n\r\n            classes = classes.sort((a, b) => {\r\n                return a.completed - b.completed;\r\n            });\r\n\r\n            //self.setState({ list: classes, oglist: classes });\r\n        });\r\n\r\n    //console.log(classes);\r\n    return classes;\r\n}\r\n\r\n\r\n\r\n\r\nconst initstate = {\r\n    name: '',\r\n    classcode: '',\r\n    preReqs: '',\r\n    nameError: '',\r\n    classcodeError: '',\r\n    prereqError: '',\r\n    value: '',\r\n    //valid: false\r\n    valid: true,\r\n    dropdowndb: []\r\n}\r\n\r\n//$('#classform #name').addEventListener(\"input\", )\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Classcard extends React.Component {\r\n    //const array = props.classes;\r\n    //console.log(array);\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchtext: '',\r\n            //list: this.props.list,\r\n            //oglist: this.props.list\r\n            user: this.props.user,\r\n            list: [],\r\n            oglist: []\r\n\r\n        }\r\n        this.changeSearch = this.changeSearch.bind(this);\r\n        this.onDelete = this.onDelete.bind(this);\r\n        this.newclass = this.newclass.bind(this);\r\n        this.duplicate = this.duplicate.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        let self = this;\r\n\r\n\r\n        var xhr = new XMLHttpRequest();\r\n        // xhr.open('POST', '/payload', true);\r\n        let classes = [];\r\n\r\n        console.log('loading');\r\n        console.log(this.state.user);\r\n        /*xhr.onreadystatechange = function () {\r\n            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {\r\n                //console.log('response is ' + xhr.responseText);\r\n                classes = JSON.parse(xhr.responseText);\r\n                console.log(classes);\r\n\r\n                classes.forEach((item) => {\r\n                    if (typeof item.pre != 'string')\r\n                        item.pre = item.pre;\r\n                    else\r\n                        item.pre = JSON.parse(item.pre);\r\n\r\n                    if (item.completed) {\r\n                        completedArray.push(item.area + ' ' + item.code);\r\n                    }\r\n                });\r\n\r\n                classes = classes.sort((a, b) => {\r\n                    return a.completed - b.completed;\r\n                });\r\n\r\n                self.setState({ list: classes, oglist: classes });\r\n            }\r\n        }\r\n        //xhr.setRequestHeader('Accept', 'application/json');\r\n        //xhr.send({ user: this.state.user.email });\r\n*/\r\n\r\n        fetch('/payload', {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(this.state.user)\r\n        })\r\n            .then(response => response.json())\r\n            .then((response) => {\r\n                classes = response.result;\r\n                console.log(classes);\r\n\r\n                classes.forEach((item) => {\r\n                    if (typeof item.pre != 'string')\r\n                        item.pre = item.pre;\r\n                    else\r\n                        item.pre = JSON.parse(item.pre);\r\n\r\n                    if (item.completed) {\r\n                        completedArray.push(item.area + ' ' + item.code);\r\n                    }\r\n                });\r\n\r\n                classes = classes.sort((a, b) => {\r\n                    return a.completed - b.completed;\r\n                });\r\n\r\n                self.setState({ list: classes, oglist: classes });\r\n            });\r\n\r\n    }\r\n\r\n\r\n    onDelete(obj) {\r\n        console.log('delete!');\r\n        console.log(obj);\r\n        //console.log(classes);\r\n        const templist = this.state.oglist.filter((item) => {\r\n            if (obj._id != item._id) {\r\n                return item;\r\n            }\r\n            else {\r\n\r\n                let xhr = new XMLHttpRequest();\r\n                xhr.open('POST', '/delete', true);\r\n\r\n                xhr.onreadystatechange = function () {\r\n                    if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {\r\n                        //console.log('response is ' + xhr.responseText);\r\n                    }\r\n                }\r\n                //console.log(classes[classes.length - 1]);\r\n                xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n\r\n\r\n                xhr.send(JSON.stringify(item));\r\n            }\r\n        });\r\n\r\n        this.setState({ oglist: templist });\r\n        this.setState({ list: templist });\r\n\r\n\r\n    }\r\n\r\n    newclass() {\r\n\r\n        //console.log('valid!');\r\n        //sendData();\r\n        // this.state=initstate;\r\n        ////console.log(this.state);\r\n\r\n        let preReqs = [];\r\n        let classes = Object.assign([], this.state.oglist);\r\n\r\n        let name = $('#name').val().trim();\r\n\r\n        let preclasscode = $('#classcode').val().trim(' ').replace(/\\s/g, '');\r\n        let classcode = preclasscode.substring(3, preclasscode.length);\r\n        let area = preclasscode.substring(0, 3).toUpperCase();\r\n        let completed = $('#completed').prop('checked');\r\n        preReqs = $('#preReqs').val().toUpperCase().trim().split(',');\r\n\r\n        preReqs = preReqs.map((str) => {\r\n            str = str.replace(/\\s/g, '');\r\n\r\n            if (str.length % 7 != 0 || str.length == 0) {\r\n                return null;\r\n            }\r\n            //console.log('str is'+str);\r\n            return str.slice(0, 3) + ' ' + str.slice(3, str.length);\r\n        });\r\n\r\n        preReqs = preReqs.filter((e) => {\r\n            return e\r\n        });\r\n\r\n        console.log(preReqs);\r\n\r\n        let xhr = new XMLHttpRequest();\r\n\r\n        let newitem = createClass(name, area, classcode, completed, preReqs);\r\n        newitem.email = this.state.user.email;\r\n\r\n        if (this.duplicate(newitem)) {\r\n            xhr.open('POST', '/update', true);\r\n            //console.log(newitem._id);\r\n        }\r\n        else {\r\n            classes.push(newitem);\r\n            this.setState({ oglist: classes });\r\n            this.setState({ list: classes });\r\n            xhr.open('POST', '/submit', true);\r\n        }\r\n\r\n        $('#name').val('');\r\n        $('#classcode').val('');\r\n        $('#completed').checked = false;\r\n        $('#preReqs').val('');\r\n        //update();\r\n\r\n\r\n\r\n\r\n        xhr.onreadystatechange = function () {\r\n            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {\r\n                //console.log('response is ' + xhr.responseText);\r\n            }\r\n        }\r\n        //console.log(classes[classes.length - 1]);\r\n        xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n        console.log(newitem);\r\n\r\n        xhr.send(JSON.stringify(newitem), () => {\r\n            this.setState({ oglist: load() });\r\n            this.setState({ list: load() });\r\n        });\r\n    }\r\n\r\n    duplicate(item) {\r\n        var bool = false;\r\n        // item._id=0;\r\n        let templist = this.state.oglist.map((olditem) => {\r\n            if (item.area == olditem.area && item.code == olditem.code) {\r\n                //item._id=olditem._id;\r\n                bool = true;\r\n                return item;\r\n\r\n            }\r\n            else {\r\n                return olditem\r\n            }\r\n        });\r\n        this.setState({ oglist: templist });\r\n        this.setState({ list: templist });\r\n\r\n        return bool;\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"row mainbody col-12\">\r\n                    <div className=\"col-3\">\r\n                        <div className=\"card \">\r\n                            <div className=\"card-header\">\r\n                                <h1>Class Input</h1>\r\n                            </div>\r\n                            <div className=\"card-body\">\r\n                                <Classform newclass={this.newclass} list={this.state.oglist} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-7\">\r\n                        <div className=\"card\" style={{ height: '100%' }}>\r\n                            <div className=\"d-flex card-header container align-items-center\">\r\n                                <h1 className=\"col-4 \">Classes</h1>\r\n                                <Search changeSearch={this.changeSearch} searchtext={this.state.searchtext} />\r\n                            </div>\r\n                            <div className=\"card-body container-fluid\" style={{ overflow: \"scroll\", overflowX: \"hidden\" }}>\r\n                                <div className=\"row\">\r\n                                    <Truecard list={this.state.list} searchtext={this.state.searchtext} delete={this.onDelete} />\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nclass Truecard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //list: this.props.list\r\n        };\r\n        console.log(this.props.list);\r\n        this.removeClass = this.removeClass.bind(this);\r\n    }\r\n\r\n    removeClass(obj) {\r\n        this.props.delete(obj);\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let filteredItems = (this.props.list ? this.props.list : []).map((item) => {\r\n            console.log('loading ' + item.name);\r\n            return <Singlecard key={item.area.toString() + item.code.toString()} delete={this.removeClass} data={item} />\r\n\r\n        });\r\n\r\n\r\n        return filteredItems;\r\n    }\r\n}\r\n\r\nexport default Classcard;","import React, { Fragment } from \"react\";\n//import { useAuth0 } from \"../react-auth0-spa\";\n\nconst Home = () => {\n    //const { isAuthenticated } = useAuth0();\n    console.log(\"Home\");\n    return (\n        <Fragment>\n            <div className=\"mainbody\">\n\n\n                <div className=\"row d-flex justify-content-center\">\n                    <h1 className=\"col-6 text-center\">\n                        Welcome To Class.io\n                    </h1>\n                </div>\n                <div className=\"row d-flex  justify-content-center\">\n                    <h4 className=\"col-8 text-center\">\n                        <span>    </span>Classdotio is an interactive Web Application using React, Node.js, Auth0, and MongoDB to\n                    visually tell users\n                    which classes they have taken, which classes they are eligible to take, and which classes\n                    they are\n                    unable to take. It uses the Auth0 SDK to enable user profile Authentication.\n                    </h4>\n                </div>\n            </div>\n        </Fragment>\n\n    )\n}\n\nexport default Home;","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { render } from \"react-dom\";\nimport Search from \"../components/Search\"\nimport Singlecard from \"./Singlecard\";\n\n\n\nfunction Classes(props) {\n    const [userClasses, setUserClasses] = useState([])\n    const [searchText, setSearchText] = useState('')\n\n    useEffect(() => {\n        console.log(props.user)\n        axios.post('/getUserInfo',{ email: props.user.email }).then((userInfo) => {\n            console.log(userInfo)\n        })\n    })\n    return(\n        <div>\n            <div className=\"col-7\">\n                <div className=\"card\" style={{ height: '100%' }}>\n                    <div className=\"d-flex card-header container align-items-center\">\n                        <h1 className=\"col-4 \">Classes</h1>\n                        <Search />\n                    </div>\n                    <div className=\"card-body container-fluid\" style={{ overflow: \"scroll\", overflowX: \"hidden\" }}>\n                        <div className=\"row\">\n                            {/*<Singlecard data={props.user} list={userClasses} searchtext={searchText} />*/}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Classes","import React, { useEffect, useState } from \"react\";\nimport { render } from \"react-dom\";\nimport Classform from \"../components/Classform\"\nimport Classes from \"../components/Classes\"\n\n\nfunction DashBoard(props) {\n    return (\n        <div>\n            <Classform />\n            <Classes user={props.user} />\n        </div>\n    )\n}\n\n\nexport default DashBoard","import React from 'react';\n//import ReactDOM from 'react-dom';\n//import logo from './logo.svg';\nimport './style.css';\n//import $ from 'jquery';\nimport NavBar from \"./components/NavBar\";\nimport { useAuth0 } from \"./react-auth0-spa\";\nimport { Router, Route, Switch } from \"react-router-dom\";\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport Profile from \"./components/Profile\";\nimport history from \"./utils/history\";\nimport ClassCard from \"./components/ClassCard.js\";\nimport Home from \"./components/Home.js\"\nimport DashBoard from './pages/DashBoard';\n//import classes from '*.module.css';\n\n\n\n\nfunction App() {\n\tconst { loading, isAuthenticated, user } = useAuth0();\n\n\n\n\tif (loading) {\n\t\treturn <div>Loading...</div>;\n\t}\n\n\treturn (\n\t\t<div className=\"App container-fluid\">\n\t\t\t{/* Don't forget to include the history module */}\n\t\t\t<Router history={history}>\n\t\t\t\t<header>\n\t\t\t\t\t<NavBar />\n\t\t\t\t</header>\n\t\t\t\t<Switch>\n\n\t\t\t\t\t{/*<PrivateRoute path=\"/\" component={ClassCard} />*/}\n\n\t\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t\t{isAuthenticated ? <DashBoard user={user} /> : <Home />}\n\n\t\t\t\t\t</Route>\n\n\t\t\t\t\t<PrivateRoute exact path=\"/dashboard\" >\n\t\t\t\t\t\t<DashBoard user={user} />\n\t\t\t\t\t</PrivateRoute>\n\t\t\t\t\t<Route path=\"/profile\" >\n\t\t\t\t\t\t<Profile />\n\t\t\t\t\t</Route>\n\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t</div >\n\t);\n}\n\n\n\n\n//import trashIcon from './assets/delete.svg';\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// src/index.js\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\nimport history from \"./utils/history\";\n//import { Router } from \"express\";\nimport { BrowserRouter as Router} from \"react-router-dom\";\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  history.push(\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nReactDOM.render(\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={window.location.origin}\n    onRedirectCallback={onRedirectCallback}\n  >\n    <Router>\n      <App />\n    </Router>\n\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}